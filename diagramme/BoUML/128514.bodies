class Plateau
!!!128770.java!!!	Plateau()
        plateau = new ArrayList<>();
        for (int i = 0; i < 6; i++) {
            List<Case> ligne = new ArrayList<>();
            for (int j = 0; j < 7; j++) {
                ligne.add(new Case());
            }
            plateau.add(ligne);
        }
        this.couleurCourante = 'R';
!!!128898.java!!!	afficher() : void
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 7; j++) {
                plateau.get(i).get(j).afficher();
            }
            System.out.println();
        }
        System.out.println("-----------------");
!!!129026.java!!!	getEtat(in i : int, in j : int) : char
        return plateau.get(i).get(j).getEtat();
!!!129154.java!!!	jouer(in colonne : int) : void
        for (int i = 5; i >= 0; i--) {
            for (int j = 0; j < 7; j++) {
                if (j == colonne && this.getEtat(i, j) == 'V') {
                    plateau.get(i).get(j).jouer(this.couleurCourante);
                    this.changerCouleurCourante();
                    return;
                }
            }
        }
!!!129282.java!!!	changerCouleurCourante() : void
        if (this.couleurCourante == 'R') {
            this.couleurCourante = 'J';
        } else {
            this.couleurCourante = 'R';
        }
!!!129410.java!!!	estGagne() : boolean
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 7; j++) {
                char couleur = this.getEtat(i, j);
                if (couleur != 'V') {
                    // Vérification horizontale
                    if (j + 3 < 7 && couleur == this.getEtat(i, j + 1) && couleur == this.getEtat(i, j + 2) && couleur == this.getEtat(i, j + 3)) {
                        return true;
                    }
                    // Vérification verticale
                    if (i + 3 < 6 && couleur == this.getEtat(i + 1, j) && couleur == this.getEtat(i + 2, j) && couleur == this.getEtat(i + 3, j)) {
                        return true;
                    }
                    // Vérification diagonale montante
                    if (i + 3 < 6 && j + 3 < 7 && couleur == this.getEtat(i + 1, j + 1) && couleur == this.getEtat(i + 2, j + 2) && couleur == this.getEtat(i + 3, j + 3)) {
                        return true;
                    }
                    // Vérification diagonale descendante
                    if (i + 3 < 6 && j - 3 >= 0 && couleur == this.getEtat(i + 1, j - 1) && couleur == this.getEtat(i + 2, j - 2) && couleur == this.getEtat(i + 3, j - 3)) {
                        return true;
                    }
                }
            }
        }
        return false;
!!!129538.java!!!	getCouleurCourante() : char
        return this.couleurCourante;
!!!129666.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 7; j++) {
                sb.append(plateau.get(i).get(j).getEtat());
            }
            sb.append("\n");
        }
        return sb.toString();
